<?php

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\multiversion\Entity\WorkspaceInterface;

/**
 * Implements hook_entity_type_alter().
 */
function workspace_entity_type_alter(array &$entity_types) {
  \Drupal::service('workspace.entity_type_info')->entityTypeAlter($entity_types);
}

/**
 * Implements hook_entity_type_build().
 */
function workspace_entity_type_build(array &$entity_types) {
  \Drupal::service('workspace.entity_type_info')->entityTypeBuild($entity_types);
}

/**
 * Implements hook_entity_base_field_info().
 */
function workspace_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  return \Drupal::service('workspace.entity_type_info')->entityBaseFieldInfo($entity_type);
}

/**
 * Default value callback for 'upstream' base field definition.
 *
 * @return array
 */
function workspace_active_id() {
  /** @var \Drupal\multiversion\Entity\Workspace $active_workspace */
  $active_workspace = \Drupal::service('workspace.manager')->getActiveWorkspace();
  if ($active_workspace instanceof WorkspaceInterface) {
    return [$active_workspace->id()];
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert()
 *
 * @param \Drupal\multiversion\Entity\WorkspaceInterface $workspace
 */
function workspace_workspace_insert(WorkspaceInterface $workspace) {
  \Drupal::service('workspace.entity_operations')->workspaceInsert($workspace);
}

function workspace_pointer_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable) {
  return \Drupal\workspace\Entity\Replication::getPointerAllowedValues($definition, $entity, $cacheable);
}

/**
 * Implements hook_toolbar().
 */
function workspace_toolbar() {
  return \Drupal::service('workspace.toolbar')->toolbar();
}

/**
 * Implements hook_entity_access().
 */
function workspace_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  return \Drupal::service('workspace.entity_access')->entityAccess($entity, $operation, $account);
}

/**
 * Implements hook_entity_create_access().
 */
function workspace_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return \Drupal::service('workspace.entity_access')->entityCreateAccess($account, $context, $entity_bundle);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function workspace_workspace_access(EntityInterface $entity, $operation, AccountInterface $account) {
  return \Drupal::service('workspace.entity_access')->workspaceAccess($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function workspace_workspace_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return \Drupal::service('workspace.entity_access')->workspaceCreateAccess($account, $context, $entity_bundle);
}


/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function workspace_theme($existing, $type, $theme, $path) {
  return [
    'workspace_add_list' => [
      'variables' => ['content' => NULL],
    ],
    'workspace_rev' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK
 */
function workspace_preprocess_workspace_add_list(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = array('query' => \Drupal::request()->query->all());
      $variables['types'][$type->id()]['url'] = Url::fromRoute('entity.workspace.add_form', array('workspace_type' => $type->id()), $options);
    }
  }
}

/**
 * Prepares variables for revision templates.
 */
function workspace_preprocess_workspace_rev(&$variables) {
  $uuid = $variables['elements']['#uuid'];
  $rev = $variables['elements']['#rev'];
  $rev_info = array_merge(
    \Drupal::service('multiversion.entity_index.rev')->get("$uuid:$rev"),
    $variables['elements']['#rev_info']
  );

  $variables = array_merge($variables, $rev_info);

  list($i) = explode('-', $rev);
  // Apart from the index length, we want 7 characters plus dash and ellipsis.
  $length = strlen($i) + 9;
  $title = Unicode::truncate($rev, $length, FALSE, TRUE);

  if (!empty($rev_info['revision_id'])) {
    $entity_revision = \Drupal::entityTypeManager()->getStorage($rev_info['entity_type_id'])->loadRevision($rev_info['revision_id']);
    $variables['title'] = Link::fromTextAndUrl($title, $entity_revision->toUrl('revision'));
  }
  else {
    $variables['title'] = $title;
  }
}
